# -*- coding: utf-8 -*-
"""BenchmarksApp1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cewhjchtd6aZjgvUcPHn9WBdAXmPLgGm
"""

import streamlit as st
from PIL import Image
from sqlalchemy import create_engine
import pandas as pd

# Set up page configuration
st.set_page_config(
    page_title="Benchmarks",
    layout="centered"
)

# Navigation through session state
if "page" not in st.session_state:
    st.session_state.page = "home"

# Navigation logic
def go_to_page(page_name):
    st.session_state.page = page_name
    st.experimental_rerun()

# Database connection
@st.cache_resource
def get_database_connection():
    server = 'db-pd-segmentprojects.database.windows.net'
    database = 'sqldb-pd-segmentprojects-pv-im'
    username = 'sa-segment-projects-pv-im-vba'
    password = 'gyggyf-vigket-4byJre'
    connection_string = f'mssql+pyodbc://{username}:{password}@{server}/{database}?driver=ODBC+Driver+18+for+SQL+Server'
    engine = create_engine(connection_string)
    return engine

# Home Page
if st.session_state.page == "home":
    # Add a header image (Optional, if you have one)
    st.image("/mnt/data/image.png", use_column_width=True)

    # Title Section
    st.title("BENCHMARKS")
    st.markdown("**Welcome to the new data input Application for IM Benchmarks!**")

    # User Information Section
    st.subheader(":information_source: User Information:")
    st.markdown(
        """
        - All Investment Models are directly connected to this database.
        - If data is changed, all models can access the updated data immediately.
        - For a comparison and visualisation of Benchmarks, please refer to:
        """
    )

    # Benchmarks Power BI button
    if st.button("Benchmarks Power BI"):
        st.markdown("[Open Power BI Dashboard](https://powerbi.microsoft.com/)")

    # Launch Application Section
    st.write("---")
    st.markdown(
        "<div style='text-align: center;'>"
        "<img src='https://img.icons8.com/fluency/96/000000/database.png' alt='Launch App Icon'/>"
        "<h3 style='color: #4CAF50;'>Launch Application</h3>"
        "<p>Click here to launch the Benchmarks application. Admins will be able to edit value assigned to them. Visitors will be able to view all values.</p>"
        "</div>", unsafe_allow_html=True
    )
    if st.button("Launch Application"):
        go_to_page("page2")

    # Support & Other Buttons
    st.write("---")
    col1, col2 = st.columns([1, 1])
    with col1:
        if st.button("Support & Feedback"):
            st.info("Redirecting to Support & Feedback...")
    with col2:
        if st.button("Benchmarks User Guide"):
            st.info("Opening User Guide...")
    if st.button("Benchmarks Process Guide"):
        st.info("Opening Process Guide...")

    # Footer
    st.write("---")
    st.markdown("<p style='text-align: center;'>Powered by Streamlit</p>", unsafe_allow_html=True)

# Page 2: Enter Username
elif st.session_state.page == "page2":
    st.title("Enter Your Username")
    st.markdown("Please enter your username to proceed.")

    responsible_name = st.text_input("Username:")

    if st.button("Enter"):
        if responsible_name:
            st.session_state.responsible_name = responsible_name
            go_to_page("page3")
        else:
            st.error("Please enter a username before proceeding.")

# Page 3: Benchmarks Overview
elif st.session_state.page == "page3":
    st.title("Benchmarks Overview")

    # Display logged-in user
    responsible_name = st.session_state.get('responsible_name', 'User')
    st.markdown(f"**Current User:** {responsible_name}")

    # Return to Home Button
    if st.button("Return to Home"):
        go_to_page("home")

    # Load data from database
    engine = get_database_connection()

    fact_query = "SELECT ID, Country, Technology, Benchmark, Value, Updated_By, Last_Viewed_Date, Last_Update_Date, Responsible_ID FROM fact_table"
    dimension_query = "SELECT [Responsible ID], Responsible, [Backup Responsible] FROM dimension_table"

    fact_df = pd.read_sql(fact_query, engine)
    dimension_df = pd.read_sql(dimension_query, engine)

    # Merge tables on Responsible_ID
    merged_df = fact_df.merge(dimension_df, left_on='Responsible_ID', right_on='Responsible ID', how='inner')

    # Filter rows where responsible_name matches Responsible or Backup Responsible
    filtered_df = merged_df[(merged_df['Responsible'] == responsible_name) | (merged_df['Backup Responsible'] == responsible_name)]

    # Display table
    st.write("---")
    st.markdown("### Your Assigned Benchmarks")
    if not filtered_df.empty:
        st.dataframe(filtered_df)
    else:
        st.warning("No benchmarks assigned to you.")

! pip freeze > dependencies.txt

